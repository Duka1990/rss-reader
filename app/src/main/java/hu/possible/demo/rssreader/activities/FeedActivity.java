package hu.possible.demo.rssreader.activities;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.ProgressBar;

import butterknife.BindView;
import butterknife.ButterKnife;
import hu.possible.demo.rssreader.R;
import hu.possible.demo.rssreader.adapters.RssFeedListAdapter;
import hu.possible.demo.rssreader.models.ContentState;
import hu.possible.demo.rssreader.models.Feed;
import hu.possible.demo.rssreader.models.Item;
import hu.possible.demo.rssreader.utils.ui.RegularSpacerItemDecoration;
import io.reactivex.Observer;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.Disposable;

public class FeedActivity extends AbstractActivity {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTANTS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static final String PARAM_RSS_SOURCE_ID = "rssSourceId";

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTANTS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTRUCTION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static Intent newIntent(Context context, String rssSourceId) {
        Intent intent = new Intent(context, FeedActivity.class);

        intent.putExtra(PARAM_RSS_SOURCE_ID, rssSourceId);

        return intent;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTRUCTION - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FIELDS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @BindView(R.id.rss_feed_list_recyclerView)
    RecyclerView mRecyclerView;

    @BindView(R.id.rss_feed_list_progressBar)
    ProgressBar mProgressBar;

    private String mRssSourceId;

    RssFeedListAdapter mRssFeedListAdapter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FIELDS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Activity OVERRIDES
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mRssSourceId = getIntent().getStringExtra(PARAM_RSS_SOURCE_ID);

        setContentView(R.layout.activity_feed);

        ButterKnife.bind(this);

        setupToolbar(true, false, false, true, true);

        mRssFeedListAdapter = new RssFeedListAdapter(this);

        int spacing = (int) getResources().getDimension(R.dimen.rss_feed_list_recyclerView_spacing);
        int firstRowSpacing = (int) getResources().getDimension(R.dimen.rss_feed_list_recyclerView_firstRowSpacing);
        int lastRowSpacing = (int) getResources().getDimension(R.dimen.rss_feed_list_recyclerView_lastRowSpacing);

        mRecyclerView.addItemDecoration(new RegularSpacerItemDecoration(1, firstRowSpacing, lastRowSpacing, spacing, true));
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        mRecyclerView.setAdapter(mRssFeedListAdapter);

        mRssFeedListAdapter.getOnClickObservable()
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Item>() {
                    @Override
                    public void onSubscribe(@NonNull Disposable d) {
                    }

                    @Override
                    public void onNext(@NonNull Item item) {
                        Snackbar
                                .make(getRootContentView(), item.getLink(), Snackbar.LENGTH_SHORT)
                                .show();
                    }

                    @Override
                    public void onError(@NonNull Throwable e) {
                    }

                    @Override
                    public void onComplete() {
                    }
                });

        mRssFeedListAdapter.getOnRemoveObservable()
                .subscribeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<Item>() {
                    @Override
                    public void onSubscribe(@NonNull Disposable d) {
                    }

                    @Override
                    public void onNext(@NonNull Item item) {
                        mContentManager.removeFeedItem(item);
                    }

                    @Override
                    public void onError(@NonNull Throwable e) {
                    }

                    @Override
                    public void onComplete() {
                    }
                });

        mRecyclerView.setVisibility(View.GONE);
        mProgressBar.setVisibility(View.VISIBLE);

        mContentManager.loadFeedInRssSource(mRssSourceId, false);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Activity OVERRIDES - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING / CONTENT STATE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onContentStateChanged(ContentState contentState) {
        switch (contentState) {
            case LOADING:
                mRecyclerView.setVisibility(View.GONE);
                mProgressBar.setVisibility(View.VISIBLE);
                break;
            case READY:
                mRecyclerView.setVisibility(View.VISIBLE);
                mProgressBar.setVisibility(View.GONE);

                displayContent();
                break;
            case EMPTY:
                mProgressBar.setVisibility(View.GONE);

                clearContent();
                break;
            case ERROR:
                mProgressBar.setVisibility(View.GONE);

                break;
            default:
                break;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING / CONTENT STATE - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onRefreshSelected() {
        mContentManager.loadFeedInRssSource(mRssSourceId, true);
    }

    @Override
    protected void onSortSelected() {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DIALOG SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DIALOG SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SNACK BAR SUPPORT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public View getRootContentView() {
        return findViewById(android.R.id.content);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SNACK BAR SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DATA HANDLING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void clearContent() {
        mRssFeedListAdapter.clearItemsIfAny();
        mRssFeedListAdapter.notifyDataSetChanged();
    }

    private void displayContent() {
        Feed feed = mContentManager.getFeedFromRssSource(mRssSourceId);

        if (feed == null) {
            return;
        }

        mRssFeedListAdapter.replaceItems(feed.getChannel().getItems());
        mRssFeedListAdapter.notifyDataSetChanged();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DATA HANDLING - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
