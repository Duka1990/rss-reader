package hu.possible.demo.rssreader.activities;

import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;

import javax.inject.Inject;

import hu.possible.demo.rssreader.R;
import hu.possible.demo.rssreader.application.MyApplication;
import hu.possible.demo.rssreader.managers.ContentManager;
import hu.possible.demo.rssreader.models.ContentOrderMode;
import hu.possible.demo.rssreader.models.ContentState;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.annotations.NonNull;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.observers.DisposableObserver;
import lombok.experimental.Accessors;
import timber.log.Timber;

@Accessors(prefix = "m")
public abstract class AbstractActivity extends AppCompatActivity {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTANTS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    enum ContentOrderPermission {

        ORDER_BY_TITLE,

        ORDER_BY_PUB_DATE,

        NONE

    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTANTS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FIELDS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    protected ContentManager mContentManager;

    private CompositeDisposable mContentStateDisposable = new CompositeDisposable();

    private boolean mDisplayAdd;

    private boolean mDisplayRefresh;

    private boolean mDisplayOpenInBrowser;

    private boolean mDisplayShare;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FIELDS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Activity OVERRIDES
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        injectActivity();
    }

    @Override
    protected void onResume() {
        super.onResume();

        initializeDisposables();
    }

    @Override
    protected void onPause() {
        super.onPause();

        clearDisposables();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.toolbar_actions, menu);

        MenuItem addItem = menu.findItem(R.id.toolbar_action_add);
        MenuItem refreshItem = menu.findItem(R.id.toolbar_action_refresh);
        MenuItem openInBrowserItem = menu.findItem(R.id.toolbar_action_open_in_browser);
        MenuItem orderItem = menu.findItem(R.id.toolbar_action_order);
        MenuItem orderByAZItem = menu.findItem(R.id.toolbar_action_order_az);
        MenuItem orderByZAItem = menu.findItem(R.id.toolbar_action_order_za);
        MenuItem orderByNewestFirstItem = menu.findItem(R.id.toolbar_action_order_newest_first);
        MenuItem orderByOldestFirstItem = menu.findItem(R.id.toolbar_action_order_oldest_first);
        MenuItem shareItem = menu.findItem(R.id.toolbar_action_share);

        addItem.setVisible(mDisplayAdd);
        refreshItem.setVisible(mDisplayRefresh);
        openInBrowserItem.setVisible(mDisplayOpenInBrowser);

        switch (getContentOrderPermission()) {
            case ORDER_BY_TITLE:
                orderItem.setVisible(true);
                orderByAZItem.setVisible(true);
                orderByZAItem.setVisible(true);
                orderByNewestFirstItem.setVisible(false);
                orderByOldestFirstItem.setVisible(false);
                break;
            case ORDER_BY_PUB_DATE:
                orderItem.setVisible(true);
                orderByAZItem.setVisible(false);
                orderByZAItem.setVisible(false);
                orderByNewestFirstItem.setVisible(true);
                orderByOldestFirstItem.setVisible(true);
                break;
            case NONE:
                orderItem.setVisible(false);
                break;
            default:
                throw new UnsupportedOperationException();
        }

        shareItem.setVisible(mDisplayShare);

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        switch (id) {
            case android.R.id.home:
                onHomeSelected();
                return true;
            case R.id.toolbar_action_add:
                onAddSelected();
                return true;
            case R.id.toolbar_action_refresh:
                onRefreshSelected();
                return true;
            case R.id.toolbar_action_open_in_browser:
                onOpenInBrowserSelected();
                return true;
            case R.id.toolbar_action_order_az:
                item.setChecked(true);
                onOrderSelected(ContentOrderMode.ORDER_BY_TITLE_ASC);
                return true;
            case R.id.toolbar_action_order_za:
                item.setChecked(true);
                onOrderSelected(ContentOrderMode.ORDER_BY_TITLE_DESC);
                return true;
            case R.id.toolbar_action_order_newest_first:
                item.setChecked(true);
                onOrderSelected(ContentOrderMode.ORDER_BY_PUB_DATE_ASC);
                return true;
            case R.id.toolbar_action_order_oldest_first:
                item.setChecked(true);
                onOrderSelected(ContentOrderMode.ORDER_BY_PUB_DATE_DESC);
                return true;
            case R.id.toolbar_action_order_default:
                item.setChecked(true);
                onOrderSelected(ContentOrderMode.DEFAULT);
                return true;
            case R.id.toolbar_action_share:
                onShareSelected();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Activity OVERRIDES - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DEPENDENCY INJECTION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void injectActivity() {
        MyApplication.getInstance().getMainComponent().inject(this);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DEPENDENCY INJECTION - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void initializeDisposables() {
        if (mContentStateDisposable == null) {
            mContentStateDisposable = new CompositeDisposable();
        }

        mContentStateDisposable.add(mContentManager.getContentStatusObservable()
                .subscribeOn(AndroidSchedulers.mainThread())
                .distinctUntilChanged()
                .subscribeWith(new DisposableObserver<ContentState>() {
                    @Override
                    public void onNext(@NonNull ContentState contentState) {
                        Timber.d("mContentStateDisposable -> onNext");

                        onContentStateChanged(contentState);
                    }

                    @Override
                    public void onError(@NonNull Throwable e) {
                        Timber.e(e, "mContentStateDisposable -> onError");
                    }

                    @Override
                    public void onComplete() {
                        Timber.d("mContentStateDisposable -> onCompleted");
                    }
                }));
    }

    protected void clearDisposables() {
        mContentStateDisposable.clear();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING / CONTENT STATE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected abstract void onContentStateChanged(ContentState contentState);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING / CONTENT STATE - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT / CUSTOMIZATION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Sets up the app bar ({@link android.widget.Toolbar}).
     */
    protected void setupToolbar(
            boolean displayHomeAsUpEnabled, boolean displayShowHomeEnabled, boolean displayAdd,
            boolean displayRefresh, boolean displayOpenInBrowser, boolean displayShare) {
        mDisplayAdd = displayAdd;
        mDisplayRefresh = displayRefresh;
        mDisplayOpenInBrowser = displayOpenInBrowser;
        mDisplayShare = displayShare;

        Toolbar toolBar = findViewById(R.id.toolbar);

        setSupportActionBar(toolBar);

        updateToolbar(displayHomeAsUpEnabled, displayShowHomeEnabled);
    }

    /**
     * Updates the app bar ({@link android.widget.Toolbar}).
     */
    protected void updateToolbar(boolean displayHomeAsUpEnabled, boolean displayShowHomeEnabled) {
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(displayHomeAsUpEnabled);
            getSupportActionBar().setDisplayShowHomeEnabled(displayShowHomeEnabled);
        }
    }

    protected ContentOrderPermission getContentOrderPermission () {
        return ContentOrderPermission.NONE;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT / CUSTOMIZATION - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT / ACTIONS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void onHomeSelected() {
        finish();
    }

    protected void onAddSelected() {
    }

    protected void onRefreshSelected() {
    }

    protected void onOpenInBrowserSelected() {
    }

    protected void onOrderSelected(ContentOrderMode contentOrderMode) {
    }

    protected void onShareSelected() {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT / ACTIONS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DIALOG SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void showGeneralErrorDialog() {
        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);

        dialogBuilder.setMessage(R.string.dialog_generalError_description);

        dialogBuilder.setPositiveButton(R.string.dialog_generalError_ok, (dialog, whichButton) -> {
        });

        AlertDialog alertDialog = dialogBuilder.create();

        alertDialog.show();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DIALOG SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SNACK BAR SUPPORT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected View getRootContentView() {
        return findViewById(android.R.id.content);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SNACK BAR SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
