package hu.possible.demo.rssreader.activities;

import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.design.widget.Snackbar;
import android.text.TextUtils;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;
import com.bumptech.glide.request.RequestOptions;

import butterknife.BindView;
import butterknife.ButterKnife;
import hu.possible.demo.rssreader.R;
import hu.possible.demo.rssreader.models.ContentState;
import hu.possible.demo.rssreader.models.Enclosure;
import hu.possible.demo.rssreader.models.Item;
import hu.possible.demo.rssreader.utils.AndroidUtils;
import hu.possible.demo.rssreader.utils.ModelHelpers;
import hu.possible.demo.rssreader.utils.StringUtils;

public class ItemActivity extends AbstractActivity {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTANTS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static final String PARAM_RSS_SOURCE_ID = "rssSourceId";
    public static final String PARAM_ITEM_ID = "itemId";

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTANTS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTRUCTION
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static Intent newIntent(Context context, String rssSourceId, String itemId) {
        Intent intent = new Intent(context, ItemActivity.class);

        intent.putExtra(PARAM_RSS_SOURCE_ID, rssSourceId);
        intent.putExtra(PARAM_ITEM_ID, itemId);

        return intent;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// CONSTRUCTION - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FIELDS
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @BindView(R.id.itemActivity_title)
    TextView mTitle;

    @BindView(R.id.itemActivity_pubDate)
    TextView mPublicationDate;

    @BindView(R.id.itemActivity_image)
    ImageView mImage;

    @BindView(R.id.itemActivity_description)
    TextView mDescription;

    @BindView(R.id.itemActivity_relatedMedia_container)
    LinearLayout mRelatedMediaContainer;

    @BindView(R.id.itemActivity_relatedMedia_content)
    TextView mRelatedMediaContent;

    private String mRssSourceId;

    private String mItemId;

    private Item mItem;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// FIELDS - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Activity OVERRIDES
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mRssSourceId = getIntent().getStringExtra(PARAM_RSS_SOURCE_ID);
        mItemId = getIntent().getStringExtra(PARAM_ITEM_ID);

        setContentView(R.layout.activity_item);

        ButterKnife.bind(this);

        setupToolbar(true, false, false, false, true, true);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Activity OVERRIDES - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING / CONTENT STATE
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onContentStateChanged(ContentState contentState) {
        switch (contentState) {
            case LOADING:
                break;
            case READY:
                displayContent();
                break;
            case EMPTY:
                break;
            case ERROR:
                showGeneralErrorDialog();
                break;
            default:
                break;
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING / CONTENT STATE - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// SUBSCRIPTION HANDLING - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected ContentOrderPermission getContentOrderPermission () {
        return ContentOrderPermission.NONE;
    }

    @Override
    protected void onOpenInBrowserSelected() {
        if (mItem == null || TextUtils.isEmpty(mItem.getLink())) {
            Snackbar
                    .make(getRootContentView(), R.string.itemActivity_no_link_to_open, Snackbar.LENGTH_SHORT)
                    .show();

            return;
        }

        Uri uri = Uri.parse(mItem.getLink());

        Intent intent = new Intent(Intent.ACTION_VIEW, uri);

        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent);
        } else {
            Snackbar
                    .make(getRootContentView(), R.string.itemActivity_cannot_open_in_browser, Snackbar.LENGTH_SHORT)
                    .show();
        }
    }

    @Override
    protected void onShareSelected() {
        if (mItem == null || TextUtils.isEmpty(mItem.getLink())) {
            Snackbar
                    .make(getRootContentView(), R.string.itemActivity_no_link_share, Snackbar.LENGTH_SHORT)
                    .show();

            return;
        }

        AndroidUtils.share(this, ModelHelpers.resolveTitleFromItem(mItem), mItem.getLink());
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// TOOLBAR SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DIALOG SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DIALOG SUPPORT - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DATA HANDLING
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void displayContent() {
        mItem = mContentManager.getItemFromRssSource(mRssSourceId, mItemId);

        mTitle.setText(ModelHelpers.resolveTitleFromItem(mItem));
        mPublicationDate.setText(ModelHelpers.resolveFormattedPublicationDateFromItem(mItem));

        String imageUrl = ModelHelpers.resolveImageUrlFromItem(mItem);

        if (!TextUtils.isEmpty(imageUrl)) {
            Glide
                    .with(this)
                    .load(imageUrl)
                    .apply(new RequestOptions()
                            .placeholder(R.mipmap.ic_launcher)
                            .fitCenter())
                    .transition(DrawableTransitionOptions.withCrossFade())
                    .into(mImage);
        } else {
            mImage.setVisibility(View.GONE);
        }

        if (!TextUtils.isEmpty(mItem.getDescription())) {
            mDescription.setText(StringUtils.fromHtml(mItem.getDescription()));
        }

        if (mItem.getEnclosures() != null && mItem.getEnclosures().size() > 0) {
            String relatedMediaContent = "";

            for (Enclosure enclosure : mItem.getEnclosures()) {
                relatedMediaContent =
                        relatedMediaContent
                                + enclosure.getUrl()
                                + "\n\n";
            }

            mRelatedMediaContent.setText(relatedMediaContent);
        } else {
            mRelatedMediaContainer.setVisibility(View.GONE);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// DATA HANDLING - - END
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
